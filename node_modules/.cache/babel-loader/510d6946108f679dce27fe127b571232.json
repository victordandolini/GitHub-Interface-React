{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { childrenPropType, onSelectPropType, selectedIndexPropType } from '../helpers/propTypes';\nimport UncontrolledTabs from './UncontrolledTabs';\nimport { getTabsCount } from '../helpers/count';\nvar MODE_CONTROLLED = 0;\nvar MODE_UNCONTROLLED = 1;\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: childrenPropType,\n  direction: PropTypes.oneOf(['rtl', 'ltr']),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  defaultFocus: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: onSelectPropType,\n  selectedIndex: selectedIndexPropType,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string,\n  environment: PropTypes.object\n} : {};\nvar defaultProps = {\n  defaultFocus: false,\n  forceRenderTabPanel: false,\n  selectedIndex: null,\n  defaultIndex: null,\n  environment: null,\n  disableUpDownKeys: false\n};\n\nvar getModeFromProps = function getModeFromProps(props) {\n  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n};\n\nvar checkForIllegalModeChange = function checkForIllegalModeChange(props, mode) {\n  if (process.env.NODE_ENV !== 'production' && mode != undefined && mode !== getModeFromProps(props)) {\n    throw new Error(\"Switching between controlled mode (by using `selectedIndex`) and uncontrolled mode is not supported in `Tabs`.\\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.\");\n  }\n};\n/**\n * State:\n *   mode: Initialized only once from props and never changes\n *   selectedIndex: null if controlled mode, otherwise initialized with prop defaultIndex, changed on selection of tabs, has effect to ensure it never gets out of bound\n *   focus: Because we never remove focus from the Tabs this state is only used to indicate that we should focus the current tab.\n *          It is initialized from the prop defaultFocus, and after the first render it is reset back to false. Later it can become true again when using keys to navigate the tabs.\n */\n\n\nvar Tabs = function Tabs(props) {\n  var children = props.children,\n      defaultFocus = props.defaultFocus,\n      defaultIndex = props.defaultIndex,\n      onSelect = props.onSelect;\n\n  var _useState = useState(defaultFocus),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var _useState2 = useState(getModeFromProps(props)),\n      mode = _useState2[0];\n\n  var _useState3 = useState(mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null),\n      selectedIndex = _useState3[0],\n      setSelectedIndex = _useState3[1];\n\n  useEffect(function () {\n    // Reset focus after initial render, see comment above\n    setFocus(false);\n  }, []);\n\n  if (mode === MODE_UNCONTROLLED) {\n    // Ensure that we handle removed tabs and don't let selectedIndex get out of bounds\n    var tabsCount = getTabsCount(children);\n    useEffect(function () {\n      if (selectedIndex != null) {\n        var maxTabIndex = Math.max(0, tabsCount - 1);\n        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));\n      }\n    }, [tabsCount]);\n  }\n\n  checkForIllegalModeChange(props, mode);\n\n  var handleSelected = function handleSelected(index, last, event) {\n    // Call change event handler\n    if (typeof onSelect === 'function') {\n      // Check if the change event handler cancels the tab change\n      if (onSelect(index, last, event) === false) return;\n    } // Always set focus on tabs\n\n\n    setFocus(true);\n\n    if (mode === MODE_UNCONTROLLED) {\n      // Update selected index\n      setSelectedIndex(index);\n    }\n  };\n\n  var subProps = _extends({}, props);\n\n  subProps.focus = focus;\n  subProps.onSelect = handleSelected;\n\n  if (selectedIndex != null) {\n    subProps.selectedIndex = selectedIndex;\n  }\n\n  delete subProps.defaultFocus;\n  delete subProps.defaultIndex;\n  return /*#__PURE__*/React.createElement(UncontrolledTabs, subProps, children);\n};\n\nTabs.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nTabs.defaultProps = defaultProps;\nTabs.tabsRole = 'Tabs';\nexport default Tabs;","map":{"version":3,"sources":["C:/Users/victordandolini/Documents/GitHub/GitHub-Interface-React/node_modules/react-tabs/esm/components/Tabs.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","PropTypes","React","useEffect","useState","childrenPropType","onSelectPropType","selectedIndexPropType","UncontrolledTabs","getTabsCount","MODE_CONTROLLED","MODE_UNCONTROLLED","propTypes","process","env","NODE_ENV","children","direction","oneOf","className","oneOfType","string","array","object","defaultFocus","bool","defaultIndex","number","disabledTabClassName","disableUpDownKeys","domRef","func","forceRenderTabPanel","onSelect","selectedIndex","selectedTabClassName","selectedTabPanelClassName","environment","defaultProps","getModeFromProps","props","checkForIllegalModeChange","mode","undefined","Error","Tabs","_useState","focus","setFocus","_useState2","_useState3","setSelectedIndex","tabsCount","maxTabIndex","Math","max","min","handleSelected","index","last","event","subProps","createElement","tabsRole"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;;AAE7T,OAAOQ,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,qBAA7C,QAA0E,sBAA1E;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,IAAIC,eAAe,GAAG,CAAtB;AACA,IAAIC,iBAAiB,GAAG,CAAxB;AACA,IAAIC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACtDC,EAAAA,QAAQ,EAAEX,gBAD4C;AAEtDY,EAAAA,SAAS,EAAEhB,SAAS,CAACiB,KAAV,CAAgB,CAAC,KAAD,EAAQ,KAAR,CAAhB,CAF2C;AAGtDC,EAAAA,SAAS,EAAElB,SAAS,CAACmB,SAAV,CAAoB,CAACnB,SAAS,CAACoB,MAAX,EAAmBpB,SAAS,CAACqB,KAA7B,EAAoCrB,SAAS,CAACsB,MAA9C,CAApB,CAH2C;AAItDC,EAAAA,YAAY,EAAEvB,SAAS,CAACwB,IAJ8B;AAKtDC,EAAAA,YAAY,EAAEzB,SAAS,CAAC0B,MAL8B;AAMtDC,EAAAA,oBAAoB,EAAE3B,SAAS,CAACoB,MANsB;AAOtDQ,EAAAA,iBAAiB,EAAE5B,SAAS,CAACwB,IAPyB;AAQtDK,EAAAA,MAAM,EAAE7B,SAAS,CAAC8B,IARoC;AAStDC,EAAAA,mBAAmB,EAAE/B,SAAS,CAACwB,IATuB;AAUtDQ,EAAAA,QAAQ,EAAE3B,gBAV4C;AAWtD4B,EAAAA,aAAa,EAAE3B,qBAXuC;AAYtD4B,EAAAA,oBAAoB,EAAElC,SAAS,CAACoB,MAZsB;AAatDe,EAAAA,yBAAyB,EAAEnC,SAAS,CAACoB,MAbiB;AActDgB,EAAAA,WAAW,EAAEpC,SAAS,CAACsB;AAd+B,CAAxC,GAeZ,EAfJ;AAgBA,IAAIe,YAAY,GAAG;AACjBd,EAAAA,YAAY,EAAE,KADG;AAEjBQ,EAAAA,mBAAmB,EAAE,KAFJ;AAGjBE,EAAAA,aAAa,EAAE,IAHE;AAIjBR,EAAAA,YAAY,EAAE,IAJG;AAKjBW,EAAAA,WAAW,EAAE,IALI;AAMjBR,EAAAA,iBAAiB,EAAE;AANF,CAAnB;;AASA,IAAIU,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AACtD,SAAOA,KAAK,CAACN,aAAN,KAAwB,IAAxB,GAA+BvB,iBAA/B,GAAmDD,eAA1D;AACD,CAFD;;AAIA,IAAI+B,yBAAyB,GAAG,SAASA,yBAAT,CAAmCD,KAAnC,EAA0CE,IAA1C,EAAgD;AAC9E,MAAI7B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC2B,IAAI,IAAIC,SAAjD,IAA8DD,IAAI,KAAKH,gBAAgB,CAACC,KAAD,CAA3F,EAAoG;AAClG,UAAM,IAAII,KAAJ,CAAU,sQAAV,CAAN;AACD;AACF,CAJD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,IAAI,GAAG,SAASA,IAAT,CAAcL,KAAd,EAAqB;AAC9B,MAAIxB,QAAQ,GAAGwB,KAAK,CAACxB,QAArB;AAAA,MACIQ,YAAY,GAAGgB,KAAK,CAAChB,YADzB;AAAA,MAEIE,YAAY,GAAGc,KAAK,CAACd,YAFzB;AAAA,MAGIO,QAAQ,GAAGO,KAAK,CAACP,QAHrB;;AAKA,MAAIa,SAAS,GAAG1C,QAAQ,CAACoB,YAAD,CAAxB;AAAA,MACIuB,KAAK,GAAGD,SAAS,CAAC,CAAD,CADrB;AAAA,MAEIE,QAAQ,GAAGF,SAAS,CAAC,CAAD,CAFxB;;AAIA,MAAIG,UAAU,GAAG7C,QAAQ,CAACmC,gBAAgB,CAACC,KAAD,CAAjB,CAAzB;AAAA,MACIE,IAAI,GAAGO,UAAU,CAAC,CAAD,CADrB;;AAGA,MAAIC,UAAU,GAAG9C,QAAQ,CAACsC,IAAI,KAAK/B,iBAAT,GAA6Be,YAAY,IAAI,CAA7C,GAAiD,IAAlD,CAAzB;AAAA,MACIQ,aAAa,GAAGgB,UAAU,CAAC,CAAD,CAD9B;AAAA,MAEIC,gBAAgB,GAAGD,UAAU,CAAC,CAAD,CAFjC;;AAIA/C,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA6C,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAIN,IAAI,KAAK/B,iBAAb,EAAgC;AAC9B;AACA,QAAIyC,SAAS,GAAG3C,YAAY,CAACO,QAAD,CAA5B;AACAb,IAAAA,SAAS,CAAC,YAAY;AACpB,UAAI+B,aAAa,IAAI,IAArB,EAA2B;AACzB,YAAImB,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,SAAS,GAAG,CAAxB,CAAlB;AACAD,QAAAA,gBAAgB,CAACG,IAAI,CAACE,GAAL,CAAStB,aAAT,EAAwBmB,WAAxB,CAAD,CAAhB;AACD;AACF,KALQ,EAKN,CAACD,SAAD,CALM,CAAT;AAMD;;AAEDX,EAAAA,yBAAyB,CAACD,KAAD,EAAQE,IAAR,CAAzB;;AAEA,MAAIe,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4C;AAC/D;AACA,QAAI,OAAO3B,QAAP,KAAoB,UAAxB,EAAoC;AAClC;AACA,UAAIA,QAAQ,CAACyB,KAAD,EAAQC,IAAR,EAAcC,KAAd,CAAR,KAAiC,KAArC,EAA4C;AAC7C,KAL8D,CAK7D;;;AAGFZ,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AAEA,QAAIN,IAAI,KAAK/B,iBAAb,EAAgC;AAC9B;AACAwC,MAAAA,gBAAgB,CAACO,KAAD,CAAhB;AACD;AACF,GAdD;;AAgBA,MAAIG,QAAQ,GAAGzE,QAAQ,CAAC,EAAD,EAAKoD,KAAL,CAAvB;;AAEAqB,EAAAA,QAAQ,CAACd,KAAT,GAAiBA,KAAjB;AACAc,EAAAA,QAAQ,CAAC5B,QAAT,GAAoBwB,cAApB;;AAEA,MAAIvB,aAAa,IAAI,IAArB,EAA2B;AACzB2B,IAAAA,QAAQ,CAAC3B,aAAT,GAAyBA,aAAzB;AACD;;AAED,SAAO2B,QAAQ,CAACrC,YAAhB;AACA,SAAOqC,QAAQ,CAACnC,YAAhB;AACA,SAAO,aAAaxB,KAAK,CAAC4D,aAAN,CAAoBtD,gBAApB,EAAsCqD,QAAtC,EAAgD7C,QAAhD,CAApB;AACD,CA/DD;;AAiEA6B,IAAI,CAACjC,SAAL,GAAiBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCH,SAAxC,GAAoD,EAArE;AACAiC,IAAI,CAACP,YAAL,GAAoBA,YAApB;AACAO,IAAI,CAACkB,QAAL,GAAgB,MAAhB;AACA,eAAelB,IAAf","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { childrenPropType, onSelectPropType, selectedIndexPropType } from '../helpers/propTypes';\nimport UncontrolledTabs from './UncontrolledTabs';\nimport { getTabsCount } from '../helpers/count';\nvar MODE_CONTROLLED = 0;\nvar MODE_UNCONTROLLED = 1;\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: childrenPropType,\n  direction: PropTypes.oneOf(['rtl', 'ltr']),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  defaultFocus: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: onSelectPropType,\n  selectedIndex: selectedIndexPropType,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string,\n  environment: PropTypes.object\n} : {};\nvar defaultProps = {\n  defaultFocus: false,\n  forceRenderTabPanel: false,\n  selectedIndex: null,\n  defaultIndex: null,\n  environment: null,\n  disableUpDownKeys: false\n};\n\nvar getModeFromProps = function getModeFromProps(props) {\n  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n};\n\nvar checkForIllegalModeChange = function checkForIllegalModeChange(props, mode) {\n  if (process.env.NODE_ENV !== 'production' && mode != undefined && mode !== getModeFromProps(props)) {\n    throw new Error(\"Switching between controlled mode (by using `selectedIndex`) and uncontrolled mode is not supported in `Tabs`.\\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.\");\n  }\n};\n/**\n * State:\n *   mode: Initialized only once from props and never changes\n *   selectedIndex: null if controlled mode, otherwise initialized with prop defaultIndex, changed on selection of tabs, has effect to ensure it never gets out of bound\n *   focus: Because we never remove focus from the Tabs this state is only used to indicate that we should focus the current tab.\n *          It is initialized from the prop defaultFocus, and after the first render it is reset back to false. Later it can become true again when using keys to navigate the tabs.\n */\n\n\nvar Tabs = function Tabs(props) {\n  var children = props.children,\n      defaultFocus = props.defaultFocus,\n      defaultIndex = props.defaultIndex,\n      onSelect = props.onSelect;\n\n  var _useState = useState(defaultFocus),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var _useState2 = useState(getModeFromProps(props)),\n      mode = _useState2[0];\n\n  var _useState3 = useState(mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null),\n      selectedIndex = _useState3[0],\n      setSelectedIndex = _useState3[1];\n\n  useEffect(function () {\n    // Reset focus after initial render, see comment above\n    setFocus(false);\n  }, []);\n\n  if (mode === MODE_UNCONTROLLED) {\n    // Ensure that we handle removed tabs and don't let selectedIndex get out of bounds\n    var tabsCount = getTabsCount(children);\n    useEffect(function () {\n      if (selectedIndex != null) {\n        var maxTabIndex = Math.max(0, tabsCount - 1);\n        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));\n      }\n    }, [tabsCount]);\n  }\n\n  checkForIllegalModeChange(props, mode);\n\n  var handleSelected = function handleSelected(index, last, event) {\n    // Call change event handler\n    if (typeof onSelect === 'function') {\n      // Check if the change event handler cancels the tab change\n      if (onSelect(index, last, event) === false) return;\n    } // Always set focus on tabs\n\n\n    setFocus(true);\n\n    if (mode === MODE_UNCONTROLLED) {\n      // Update selected index\n      setSelectedIndex(index);\n    }\n  };\n\n  var subProps = _extends({}, props);\n\n  subProps.focus = focus;\n  subProps.onSelect = handleSelected;\n\n  if (selectedIndex != null) {\n    subProps.selectedIndex = selectedIndex;\n  }\n\n  delete subProps.defaultFocus;\n  delete subProps.defaultIndex;\n  return /*#__PURE__*/React.createElement(UncontrolledTabs, subProps, children);\n};\n\nTabs.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nTabs.defaultProps = defaultProps;\nTabs.tabsRole = 'Tabs';\nexport default Tabs;"]},"metadata":{},"sourceType":"module"}