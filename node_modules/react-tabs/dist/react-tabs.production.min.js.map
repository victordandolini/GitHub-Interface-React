{"version":3,"file":"react-tabs.production.min.js","sources":["../src/helpers/elementTypes.js","../src/helpers/childrenDeepMap.js","../node_modules/clsx/dist/clsx.m.js","../src/helpers/uuid.js","../src/helpers/count.js","../src/components/UncontrolledTabs.js","../src/components/Tabs.js","../src/components/TabList.js","../src/components/Tab.js","../src/components/TabPanel.js"],"sourcesContent":["function makeTypeChecker(tabsRole) {\n  return (element) => !!element.type && element.type.tabsRole === tabsRole;\n}\n\nexport const isTab = makeTypeChecker('Tab');\nexport const isTabList = makeTypeChecker('TabList');\nexport const isTabPanel = makeTypeChecker('TabPanel');\n","import { Children, cloneElement } from 'react';\nimport { isTabPanel, isTab, isTabList } from './elementTypes';\n\nfunction isTabChild(child) {\n  return isTab(child) || isTabList(child) || isTabPanel(child);\n}\n\nexport function deepMap(children, callback) {\n  return Children.map(children, (child) => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return null;\n\n    if (isTabChild(child)) {\n      return callback(child);\n    }\n\n    if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      // Clone the child that has children and map them too\n      return cloneElement(child, {\n        ...child.props,\n        children: deepMap(child.props.children, callback),\n      });\n    }\n\n    return child;\n  });\n}\n\nexport function deepForEach(children, callback) {\n  return Children.forEach(children, (child) => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return;\n\n    if (isTab(child) || isTabPanel(child)) {\n      callback(child);\n    } else if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      if (isTabList(child)) callback(child);\n      deepForEach(child.props.children, callback);\n    }\n  });\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","// Get a universally unique identifier\nlet count = 0;\nexport default function uuid() {\n  return `react-tabs-${count++}`;\n}\n\nexport function reset() {\n  count = 0;\n}\n","import { deepForEach } from './childrenDeepMap';\nimport { isTab } from './elementTypes';\n\nexport function getTabsCount(children) {\n  let tabCount = 0;\n  deepForEach(children, (child) => {\n    if (isTab(child)) tabCount++;\n  });\n\n  return tabCount;\n}\n","import PropTypes from 'prop-types';\nimport React, { cloneElement, useRef } from 'react';\nimport cx from 'clsx';\nimport uuid from '../helpers/uuid';\nimport { childrenPropType } from '../helpers/propTypes';\nimport { getTabsCount as getTabsCountHelper } from '../helpers/count';\nimport { deepMap } from '../helpers/childrenDeepMap';\nimport { isTabList, isTabPanel, isTab } from '../helpers/elementTypes';\n\nfunction isNode(node) {\n  return node && 'getAttribute' in node;\n}\n\n// Determine if a node from event.target is a Tab element\nfunction isTabNode(node) {\n  return isNode(node) && node.getAttribute('data-rttab');\n}\n\n// Determine if a tab node is disabled\nfunction isTabDisabled(node) {\n  return isNode(node) && node.getAttribute('aria-disabled') === 'true';\n}\n\nlet canUseActiveElement;\n\nfunction determineCanUseActiveElement(environment) {\n  const env =\n    environment || (typeof window !== 'undefined' ? window : undefined);\n\n  try {\n    canUseActiveElement = !!(\n      typeof env !== 'undefined' &&\n      env.document &&\n      env.document.activeElement\n    );\n  } catch (e) {\n    // Work around for IE bug when accessing document.activeElement in an iframe\n    // Refer to the following resources:\n    // http://stackoverflow.com/a/10982960/369687\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12733599\n    canUseActiveElement = false;\n  }\n}\n\nconst defaultProps = {\n  className: 'react-tabs',\n  focus: false,\n};\n\nconst propTypes = {\n  children: childrenPropType,\n  direction: PropTypes.oneOf(['rtl', 'ltr']),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  focus: PropTypes.bool,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: PropTypes.func.isRequired,\n  selectedIndex: PropTypes.number.isRequired,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string,\n  environment: PropTypes.object,\n};\n\nconst UncontrolledTabs = (props) => {\n  let tabNodes = useRef([]);\n  let tabIds = useRef([]);\n  let panelIds = useRef([]);\n  const ref = useRef();\n\n  function setSelected(index, event) {\n    // Check index boundary\n    if (index < 0 || index >= getTabsCount()) return;\n\n    const { onSelect, selectedIndex } = props;\n\n    // Call change event handler\n    onSelect(index, selectedIndex, event);\n  }\n\n  function getNextTab(index) {\n    const count = getTabsCount();\n\n    // Look for non-disabled tab from index to the last tab on the right\n    for (let i = index + 1; i < count; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from first on left to index\n    for (let i = 0; i < index; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  function getPrevTab(index) {\n    let i = index;\n\n    // Look for non-disabled tab from index to first tab on the left\n    while (i--) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from last tab on right to index\n    i = getTabsCount();\n    while (i-- > index) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  function getFirstTab() {\n    const count = getTabsCount();\n\n    // Look for non disabled tab from the first tab\n    for (let i = 0; i < count; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  function getLastTab() {\n    let i = getTabsCount();\n\n    // Look for non disabled tab from the last tab\n    while (i--) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  function getTabsCount() {\n    const { children } = props;\n    return getTabsCountHelper(children);\n  }\n\n  function getTab(index) {\n    return tabNodes.current[`tabs-${index}`];\n  }\n\n  function getChildren() {\n    let index = 0;\n    const {\n      children,\n      disabledTabClassName,\n      focus,\n      forceRenderTabPanel,\n      selectedIndex,\n      selectedTabClassName,\n      selectedTabPanelClassName,\n      environment,\n    } = props;\n\n    tabIds.current = tabIds.current || [];\n    panelIds.current = panelIds.current || [];\n    let diff = tabIds.current.length - getTabsCount();\n\n    // Add ids if new tabs have been added\n    // Don't bother removing ids, just keep them in case they are added again\n    // This is more efficient, and keeps the uuid counter under control\n    while (diff++ < 0) {\n      tabIds.current.push(uuid());\n      panelIds.current.push(uuid());\n    }\n\n    // Map children to dynamically setup refs\n    return deepMap(children, (child) => {\n      let result = child;\n\n      // Clone TabList and Tab components to have refs\n      if (isTabList(child)) {\n        let listIndex = 0;\n\n        // Figure out if the current focus in the DOM is set on a Tab\n        // If it is we should keep the focus on the next selected tab\n        let wasTabFocused = false;\n\n        if (canUseActiveElement == null) {\n          determineCanUseActiveElement(environment);\n        }\n\n        if (canUseActiveElement) {\n          wasTabFocused = React.Children.toArray(child.props.children)\n            .filter(isTab)\n            .some((tab, i) => {\n              const env =\n                environment ||\n                (typeof window !== 'undefined' ? window : undefined);\n              return env && env.document.activeElement === getTab(i);\n            });\n        }\n\n        result = cloneElement(child, {\n          children: deepMap(child.props.children, (tab) => {\n            const key = `tabs-${listIndex}`;\n            const selected = selectedIndex === listIndex;\n\n            const props = {\n              tabRef: (node) => {\n                tabNodes.current[key] = node;\n              },\n              id: tabIds.current[listIndex],\n              panelId: panelIds.current[listIndex],\n              selected,\n              focus: selected && (focus || wasTabFocused),\n            };\n\n            if (selectedTabClassName)\n              props.selectedClassName = selectedTabClassName;\n            if (disabledTabClassName)\n              props.disabledClassName = disabledTabClassName;\n\n            listIndex++;\n\n            return cloneElement(tab, props);\n          }),\n        });\n      } else if (isTabPanel(child)) {\n        const props = {\n          id: panelIds.current[index],\n          tabId: tabIds.current[index],\n          selected: selectedIndex === index,\n        };\n\n        if (forceRenderTabPanel) props.forceRender = forceRenderTabPanel;\n        if (selectedTabPanelClassName)\n          props.selectedClassName = selectedTabPanelClassName;\n\n        index++;\n\n        result = cloneElement(child, props);\n      }\n\n      return result;\n    });\n  }\n\n  function handleKeyDown(e) {\n    const { direction, disableUpDownKeys } = props;\n    if (isTabFromContainer(e.target)) {\n      let { selectedIndex: index } = props;\n      let preventDefault = false;\n      let useSelectedIndex = false;\n\n      if (e.keyCode === 32 || e.keyCode === 13) {\n        preventDefault = true;\n        useSelectedIndex = false;\n        handleClick(e);\n      }\n\n      if (e.keyCode === 37 || (!disableUpDownKeys && e.keyCode === 38)) {\n        // Select next tab to the left, validate if up arrow is not disabled\n        if (direction === 'rtl') {\n          index = getNextTab(index);\n        } else {\n          index = getPrevTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 39 || (!disableUpDownKeys && e.keyCode === 40)) {\n        // Select next tab to the right, validate if down arrow is not disabled\n        if (direction === 'rtl') {\n          index = getPrevTab(index);\n        } else {\n          index = getNextTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 35) {\n        // Select last tab (End key)\n        index = getLastTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 36) {\n        // Select first tab (Home key)\n        index = getFirstTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      }\n\n      // This prevents scrollbars from moving around\n      if (preventDefault) {\n        e.preventDefault();\n      }\n\n      // Only use the selected index in the state if we're not using the tabbed index\n      if (useSelectedIndex) {\n        setSelected(index, e);\n      }\n    }\n  }\n\n  function handleClick(e) {\n    let node = e.target;\n    do {\n      if (isTabFromContainer(node)) {\n        if (isTabDisabled(node)) {\n          return;\n        }\n\n        const index = [].slice\n          .call(node.parentNode.children)\n          .filter(isTabNode)\n          .indexOf(node);\n        setSelected(index, e);\n        return;\n      }\n    } while ((node = node.parentNode) != null);\n  }\n\n  /**\n   * Determine if a node from event.target is a Tab element for the current Tabs container.\n   * If the clicked element is not a Tab, it returns false.\n   * If it finds another Tabs container between the Tab and `this`, it returns false.\n   */\n  function isTabFromContainer(node) {\n    // return immediately if the clicked element is not a Tab.\n    if (!isTabNode(node)) {\n      return false;\n    }\n\n    // Check if the first occurrence of a Tabs container is `this` one.\n    let nodeAncestor = node.parentElement;\n    do {\n      if (nodeAncestor === ref.current) return true;\n      if (nodeAncestor.getAttribute('data-rttabs')) break;\n\n      nodeAncestor = nodeAncestor.parentElement;\n    } while (nodeAncestor);\n\n    return false;\n  }\n  const {\n    children, // unused\n    className,\n    disabledTabClassName, // unused\n    domRef,\n    focus, // unused\n    forceRenderTabPanel, // unused\n    onSelect, // unused\n    selectedIndex, // unused\n    selectedTabClassName, // unused\n    selectedTabPanelClassName, // unused\n    environment, // unused\n    disableUpDownKeys, // unused\n    ...attributes\n  } = props;\n  return (\n    <div\n      {...attributes}\n      className={cx(className)}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      ref={(node) => {\n        ref.current = node;\n        if (domRef) domRef(node);\n      }}\n      data-rttabs\n    >\n      {getChildren()}\n    </div>\n  );\n};\nUncontrolledTabs.defaultProps = defaultProps;\nUncontrolledTabs.propTypes = propTypes;\nexport default UncontrolledTabs;\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport {\n  childrenPropType,\n  onSelectPropType,\n  selectedIndexPropType,\n} from '../helpers/propTypes';\nimport UncontrolledTabs from './UncontrolledTabs';\nimport { getTabsCount } from '../helpers/count';\n\nconst MODE_CONTROLLED = 0;\nconst MODE_UNCONTROLLED = 1;\nconst propTypes = {\n  children: childrenPropType,\n  direction: PropTypes.oneOf(['rtl', 'ltr']),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n  defaultFocus: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: onSelectPropType,\n  selectedIndex: selectedIndexPropType,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string,\n  environment: PropTypes.object,\n};\nconst defaultProps = {\n  defaultFocus: false,\n  forceRenderTabPanel: false,\n  selectedIndex: null,\n  defaultIndex: null,\n  environment: null,\n  disableUpDownKeys: false,\n};\n\nconst getModeFromProps = (props) => {\n  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n};\n\nconst checkForIllegalModeChange = (props, mode) => {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    mode != undefined &&\n    mode !== getModeFromProps(props)\n  ) {\n    throw new Error(\n      `Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.`,\n    );\n  }\n};\n\n/**\n * State:\n *   mode: Initialized only once from props and never changes\n *   selectedIndex: null if controlled mode, otherwise initialized with prop defaultIndex, changed on selection of tabs, has effect to ensure it never gets out of bound\n *   focus: Because we never remove focus from the Tabs this state is only used to indicate that we should focus the current tab.\n *          It is initialized from the prop defaultFocus, and after the first render it is reset back to false. Later it can become true again when using keys to navigate the tabs.\n */\nconst Tabs = (props) => {\n  const { children, defaultFocus, defaultIndex, onSelect } = props;\n\n  const [focus, setFocus] = useState(defaultFocus);\n  const [mode] = useState(getModeFromProps(props));\n  const [selectedIndex, setSelectedIndex] = useState(\n    mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null,\n  );\n\n  useEffect(() => {\n    // Reset focus after initial render, see comment above\n    setFocus(false);\n  }, []);\n\n  if (mode === MODE_UNCONTROLLED) {\n    // Ensure that we handle removed tabs and don't let selectedIndex get out of bounds\n    const tabsCount = getTabsCount(children);\n    useEffect(() => {\n      if (selectedIndex != null) {\n        const maxTabIndex = Math.max(0, tabsCount - 1);\n        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));\n      }\n    }, [tabsCount]);\n  }\n\n  checkForIllegalModeChange(props, mode);\n\n  const handleSelected = (index, last, event) => {\n    // Call change event handler\n    if (typeof onSelect === 'function') {\n      // Check if the change event handler cancels the tab change\n      if (onSelect(index, last, event) === false) return;\n    }\n\n    // Always set focus on tabs\n    setFocus(true);\n\n    if (mode === MODE_UNCONTROLLED) {\n      // Update selected index\n      setSelectedIndex(index);\n    }\n  };\n\n  let subProps = { ...props };\n\n  subProps.focus = focus;\n  subProps.onSelect = handleSelected;\n\n  if (selectedIndex != null) {\n    subProps.selectedIndex = selectedIndex;\n  }\n  delete subProps.defaultFocus;\n  delete subProps.defaultIndex;\n  return <UncontrolledTabs {...subProps}>{children}</UncontrolledTabs>;\n};\n\nTabs.propTypes = propTypes;\nTabs.defaultProps = defaultProps;\nTabs.tabsRole = 'Tabs';\n\nexport default Tabs;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport cx from 'clsx';\n\nconst defaultProps = {\n  className: 'react-tabs__tab-list',\n};\nconst propTypes = {\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n};\nconst TabList = (props) => {\n  const { children, className, ...attributes } = props;\n\n  return (\n    <ul {...attributes} className={cx(className)} role=\"tablist\">\n      {children}\n    </ul>\n  );\n};\n\nTabList.tabsRole = 'TabList';\nTabList.propTypes = propTypes;\nTabList.defaultProps = defaultProps;\nexport default TabList;\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useRef } from 'react';\nimport cx from 'clsx';\n\nconst DEFAULT_CLASS = 'react-tabs__tab';\nconst DEFAULT_PROPS = {\n  className: DEFAULT_CLASS,\n  disabledClassName: `${DEFAULT_CLASS}--disabled`,\n  focus: false,\n  id: null,\n  panelId: null,\n  selected: false,\n  selectedClassName: `${DEFAULT_CLASS}--selected`,\n};\n\nconst propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.object,\n    PropTypes.string,\n  ]),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n  disabled: PropTypes.bool,\n  tabIndex: PropTypes.string,\n  disabledClassName: PropTypes.string,\n  focus: PropTypes.bool, // private\n  id: PropTypes.string, // private\n  panelId: PropTypes.string, // private\n  selected: PropTypes.bool, // private\n  selectedClassName: PropTypes.string,\n  tabRef: PropTypes.func,\n};\n\nconst Tab = (props) => {\n  let nodeRef = useRef();\n  const checkFocus = () => {\n    const { selected, focus } = props;\n    if (selected && focus) {\n      nodeRef.current.focus();\n    }\n  };\n  useEffect(() => {\n    checkFocus();\n  });\n  const {\n    children,\n    className,\n    disabled,\n    disabledClassName,\n    focus, // unused\n    id,\n    panelId,\n    selected,\n    selectedClassName,\n    tabIndex,\n    tabRef,\n    ...attributes\n  } = props;\n\n  return (\n    <li\n      {...attributes}\n      className={cx(className, {\n        [selectedClassName]: selected,\n        [disabledClassName]: disabled,\n      })}\n      ref={(node) => {\n        nodeRef.current = node;\n        if (tabRef) tabRef(node);\n      }}\n      role=\"tab\"\n      id={id}\n      aria-selected={selected ? 'true' : 'false'}\n      aria-disabled={disabled ? 'true' : 'false'}\n      aria-controls={panelId}\n      tabIndex={tabIndex || (selected ? '0' : null)}\n      data-rttab\n    >\n      {children}\n    </li>\n  );\n};\nTab.propTypes = propTypes;\n\nTab.tabsRole = 'Tab';\nTab.defaultProps = DEFAULT_PROPS;\nexport default Tab;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport cx from 'clsx';\n\nconst DEFAULT_CLASS = 'react-tabs__tab-panel';\nconst defaultProps = {\n  className: DEFAULT_CLASS,\n  forceRender: false,\n  selectedClassName: `${DEFAULT_CLASS}--selected`,\n};\nconst propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n  forceRender: PropTypes.bool,\n  id: PropTypes.string, // private\n  selected: PropTypes.bool, // private\n  selectedClassName: PropTypes.string,\n  tabId: PropTypes.string, // private\n};\nconst TabPanel = (props) => {\n  const {\n    children,\n    className,\n    forceRender,\n    id,\n    selected,\n    selectedClassName,\n    tabId,\n    ...attributes\n  } = props;\n\n  return (\n    <div\n      {...attributes}\n      className={cx(className, {\n        [selectedClassName]: selected,\n      })}\n      role=\"tabpanel\"\n      id={id}\n      aria-labelledby={tabId}\n    >\n      {forceRender || selected ? children : null}\n    </div>\n  );\n};\n\nTabPanel.tabsRole = 'TabPanel';\nTabPanel.propTypes = propTypes;\nTabPanel.defaultProps = defaultProps;\nexport default TabPanel;\n"],"names":["makeTypeChecker","tabsRole","element","type","isTab","isTabList","isTabPanel","deepMap","children","callback","Children","map","child","isTabChild","props","cloneElement","deepForEach","forEach","toVal","mix","k","y","str","Array","isArray","length","tmp","x","i","arguments","count","uuid","getTabsCount","tabCount","canUseActiveElement","isNode","node","isTabNode","getAttribute","isTabDisabled","UncontrolledTabs","tabNodes","useRef","tabIds","panelIds","ref","setSelected","index","event","onSelect","selectedIndex","getNextTab","getTab","getPrevTab","getTabsCountHelper","current","handleClick","e","target","isTabFromContainer","slice","call","parentNode","filter","indexOf","nodeAncestor","parentElement","className","disabledTabClassName","domRef","focus","forceRenderTabPanel","selectedTabClassName","selectedTabPanelClassName","environment","disableUpDownKeys","attributes","React","cx","onClick","onKeyDown","direction","preventDefault","useSelectedIndex","keyCode","getLastTab","getFirstTab","diff","push","result","listIndex","wasTabFocused","env","window","undefined","document","activeElement","determineCanUseActiveElement","toArray","some","tab","key","selected","tabRef","id","panelId","selectedClassName","disabledClassName","tabId","forceRender","getChildren","defaultProps","Tabs","defaultFocus","defaultIndex","useState","setFocus","getModeFromProps","mode","setSelectedIndex","useEffect","tabsCount","maxTabIndex","Math","max","min","subProps","last","TabList","role","DEFAULT_CLASS","DEFAULT_PROPS","Tab","nodeRef","checkFocus","disabled","tabIndex","TabPanel"],"mappings":"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"}